version: "3.8"

########################### NETWORKS
networks:
  traefik:
    name: traefik
    external: true
  default:
    driver: bridge
  socket-proxy:
    name: socket-proxy
    external: true
  internal:
    external: false
  vpn-subnet:
    name: vpn-subnet
    external: true

########################### SECRETS
secrets:
  cloudflare_email:
    file: $SECRETSDIR/cloudflare_email
  cloudflare_api_key:
    file: $SECRETSDIR/cloudflare_api_key
  mysql_root_password:
    file: $SECRETSDIR/mysql_root_password
  postgres_root_password:
    file: $SECRETSDIR/postgres_root_password
  firesync_secret:
    file: $SECRETSDIR/firesync_secret
  postgres_nextcloud_password:
    file: $SECRETSDIR/postgres_nextcloud_password
  restic_password:
    file: $SECRETSDIR/restic_password

########################### SERVICES
services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --api=false
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=5
    networks:
      - traefik
      - socket-proxy
    security_opt:
      - no-new-privileges:true
    secrets:
      - cloudflare_email
      - cloudflare_api_key
    depends_on:
      - socket-proxy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log
      - $DOCKERDIR/shared:/shared
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      #- "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"

  socket-proxy:
    container_name: socket-proxy
    image: fluencelabs/docker-socket-proxy
    restart: always
    networks:
      - socket-proxy
    privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
      - "127.0.0.1:2375:2375"
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      - DELETE=1 # Watchtower
        # GET Optons
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=1 # Restic
      - IMAGES=1 # Portainer, Watchtower
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer, Watchtower
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer
      # POST Options
      - CONTAINERS_CREATE=1 # WatchTower
      - CONTAINERS_START=1 # WatchTower
      - CONTAINERS_UPDATE=1 # WatchTower
      # DELETE Options
      - CONTAINERS_DELETE=1 # WatchTower
      - IMAGES_DELETE=1 # WatchTower

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - socket-proxy
    depends_on:
      - socket-proxy
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_REMOVE_VOLUMES=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_NO_STARTUP_MESSAGE=false
      - WATCHTOWER_SCHEDULE=0 0 4 * * * # Everyday at 04:00
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=telegram://$TGRAM_BOT_TOKEN@telegram?channels=$TGRAM_CHAT_ID
      - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      - DOCKER_HOST=tcp://socket-proxy:2375
      - DOCKER_API_VERSION=1.40

  mariadb:
    container_name: mariadb
    image: mariadb:latest
    restart: always
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    ports:
      - "127.0.0.1:3306:3306"
    secrets:
      - mysql_root_password
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-file-format=Barracuda
      --innodb-file-per-table=1
    volumes:
      - $DOCKERDIR/mariadb/data:/var/lib/mysql
      - $DOCKERDIR/mariadb/backups:/dbbackups
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password

  postgres:
    container_name: postgres
    image: postgres:alpine
    restart: unless-stopped
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    ports:
      - "127.0.0.1:5432:5432"
    secrets:
      - postgres_root_password
    volumes:
      - $DOCKERDIR/postgres:/var/lib/postgresql/data
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_root_password

  firefox-syncserver:
    container_name: syncserver
    image: mozilla/syncserver:1.9.1
    restart: always
    networks:
      - traefik
      - internal
    depends_on:
      - mariadb
    secrets:
      - firesync_secret
    ports:
      - "5000:5000"
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - SYNCSERVER_PUBLIC_URL=https://firesync.$DOMAINNAME
      - SYNCSERVER_SECRET_FILE=/run/secrets/firesync_secret
      - SYNCSERVER_SQLURI=pymysql://ffsync:$MYSQL_FFSYNC_PASSWORD@mariadb/ffsync
      - SYNCSERVER_BATCH_UPLOAD_ENABLED=true
      - SYNCSERVER_FORCE_WSGI_ENVIRON=true
      - SYNCSERVER_ALLOW_NEW_USER=false
      - PORT=5000
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.syncserver-rtr.entrypoints=https"
      - "traefik.http.routers.syncserver-rtr.rule=Host(`firesync.$DOMAINNAME`)"
      - "traefik.http.routers.syncserver-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.syncserver-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.syncserver-rtr.service=syncserver-svc"
      - "traefik.http.services.syncserver-svc.loadbalancer.server.port=5000"

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    networks:
      vpn-subnet:
        ipv4_address: 20.20.10.2
      socket-proxy: null
    security_opt:
      - no-new-privileges:true
    depends_on:
      - socket-proxy
    volumes:
      - $DOCKERDIR/portainer:/data
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - DOCKER_HOST=tcp://socket-proxy:2375

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    networks:
      internal: null
      vpn-subnet:
        ipv4_address: 20.20.10.3
    depends_on:
      - postgres
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKERDIR/pgadmin:/var/lib/pgadmin
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - PGADMIN_DEFAULT_EMAIL=$PERSONAL_EMAIL
      - PGADMIN_DEFAULT_PASSWORD=$PGADMIN_DEFAULT_PASSWORD
      - PGADMIN_LISTEN_PORT=5050

  pma:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    networks:
      internal: null
      vpn-subnet:
        ipv4_address: 20.20.10.4
    depends_on:
      - mariadb
    secrets:
      - mysql_root_password
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - PMA_HOST=mariadb
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
      - ServerName=$DOMAINNAME

  wallabag:
    container_name: wallabag
    image: wallabag/wallabag:latest
    restart: always
    networks:
      - traefik
      - internal
    depends_on:
      - postgres
    volumes:
      - $DOCKERDIR/wallabag/images:/var/www/wallabag/web/assets/images
      - $DOCKERDIR/wallabag/data:/var/www/wallabag/data
    ports:
      - 8006:80
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - SYMFONY__ENV__DATABASE_DRIVER=pdo_pgsql
      - SYMFONY__ENV__DATABASE_HOST=postgres
      - SYMFONY__ENV__DATABASE_PORT=5432
      - SYMFONY__ENV__DATABASE_NAME=wallabag
      - SYMFONY__ENV__DATABASE_USER=wallabag
      - SYMFONY__ENV__DATABASE_PASSWORD=$POSTGRES_WALLA_PASSWORD
      - SYMFONY__ENV__SECRET=$WALLA_SECRET
      - SYMFONY__ENV__DOMAIN_NAME=https://walla.$DOMAINNAME
      - SYMFONY__ENV__REDIS_HOST=redis
      - SYMFONY__ENV__REDIS_PASSWORD=$REDIS_PASSWORD
      - SYMFONY__ENV__FOSUSER_REGISTRATION=false
      - POPULATE_DATABASE=False
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.wallabag.entrypoints=https
      - traefik.http.routers.wallabag.rule=Host(`walla.$DOMAINNAME`)
      - traefik.http.routers.wallabag.tls=true
      ## Middlewares
      - traefik.http.routers.wallabag.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.wallabag.service=wallabag-svc
      - traefik.http.services.wallabag-svc.loadbalancer.server.port=80

  nextcloud:
    container_name: nextcloud
    image: nextcloud:latest
    restart: always
    networks:
      - traefik
      - internal
    security_opt:
      - no-new-privileges:true
    depends_on:
      - postgres
      - redis
    volumes:
      - $DOCKERDIR/nextcloud:/var/www/html
      - $DOCKERDIR/nextcloud/changes.ini:/usr/local/etc/php/conf.d/changes.ini
    secrets:
      - postgres_nextcloud_password
    ports:
      - 8008:80
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_nextcloud_password
      - POSTGRES_HOST=postgres
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.$DOMAINNAME
      - TRUSTED_PROXIES=172.18.0.0/16
      - REDIS_HOST=redis
      - REDIS_HOST_PASSWORD=$REDIS_PASSWORD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.nextcloud-rtr.entrypoints=https"
      - "traefik.http.routers.nextcloud-rtr.rule=Host(`nextcloud.$DOMAINNAME`)"
      - "traefik.http.routers.nextcloud-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.nextcloud-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.nextcloud-rtr.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.regex=^/.well-known/ca(l|rd)dav"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.replacement=/remote.php/dav/"

  nextcloud-cron:
    container_name: nextcloud-cron
    image: nextcloud:latest
    entrypoint: /cron.sh
    restart: always
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    depends_on:
      - nextcloud
      - redis
    volumes:
      - $DOCKERDIR/nextcloud:/var/www/html
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID

  wireguard:
    container_name: wireguard
    image: linuxserver/wireguard:latest
    restart: unless-stopped
    networks:
      vpn-subnet:
        ipv4_address: 20.20.10.5
    volumes:
      - $DOCKERDIR/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - SERVERURL=wireguard.$DOMAINNAME
      - SERVERPORT=51820
      - PEERS=2
      - PEERDNS=auto
      - INTERNAL_SUBNET=10.13.14.0

  app:
    container_name: ttrss-app
    image: cthulhoo/ttrss-fpm-pgsql-static:latest
    restart: always
    networks:
      - internal
    depends_on:
      - postgres
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKERDIR/ttrss:/var/www/html
    environment:
      - TZ=$TZ
      - OWNER_UID=$PUID
      - OWNER_GID=$PGID
      - TTRSS_DB_TYPE=pgsql
      - TTRSS_DB_HOST=postgres
      - TTRSS_DB_NAME=ttrss
      - TTRSS_DB_USER=ttrss
      - TTRSS_DB_PASS=$POSTGRES_TTRSS_PASSWORD
      - TTRSS_SELF_URL_PATH=https://feed.$DOMAINNAME/tt-rss/

  ttrss-updater:
    container_name: ttrss-updater
    image: cthulhoo/ttrss-fpm-pgsql-static:latest
    restart: always
    networks:
      - internal
    depends_on:
      - app
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKERDIR/ttrss:/var/www/html
    environment:
      - TZ=$TZ
      - OWNER_UID=$PUID
      - OWNER_GID=$PGID
      - TTRSS_DB_TYPE=pgsql
      - TTRSS_DB_HOST=postgres
      - TTRSS_DB_NAME=ttrss
      - TTRSS_DB_USER=ttrss
      - TTRSS_DB_PASS=$POSTGRES_TTRSS_PASSWORD
      - TTRSS_SELF_URL_PATH=https://feed.$DOMAINNAME/tt-rss/
    command: /opt/tt-rss/updater.sh

  ttrss:
    container_name: ttrss
    image: cthulhoo/ttrss-web:latest
    restart: unless-stopped
    networks:
      - traefik
      - internal
    depends_on:
      - app
    security_opt:
      - no-new-privileges:true
    ports:
      - 8009:2015
    volumes:
      - $DOCKERDIR/ttrss:/var/www/html:ro
    environment:
      - TZ=$TZ
      - OWNER_UID=$PUID
      - OWNER_GID=$PGID
      - HTTP_HOST=localhost
      - HTTP_PORT=2015
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.ttrss-rtr.entrypoints=https"
      - "traefik.http.routers.ttrss-rtr.rule=Host(`feed.$DOMAINNAME`)"
      - "traefik.http.routers.ttrss-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.ttrss-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.ttrss-rtr.service=ttrss-svc"
      - "traefik.http.services.ttrss-svc.loadbalancer.server.port=2015"

  vaultwarden:
    container_name: vaultwarden
    image: vaultwarden/server:latest
    restart: always
    volumes:
      - $DOCKERDIR/vaultwarden:/data
    depends_on:
      - postgres
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik
      - internal
    ports:
      - 8003:80
      - 3012:3012
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - WEBSOCKET_ENABLED=true # Required to use websockets
      - SIGNUPS_ALLOWED=false # set to false to disable signups
      - SIGNUPS_VERIFY=true
      - SMTP_EXPLICIT_TLS=true
#      - ADMIN_TOKEN=$ADMIN_TOKEN
      - SMTP_HOST=$SMTP_HOST
      - SMTP_FROM=$SMTP_FROM
      - SMTP_PORT=$SMTP_PORT
      - SMTP_SSL=true
      - SMTP_USERNAME=$SMTP_USERNAME
      - SMTP_PASSWORD=$SMTP_PASSWORD
      - DOMAIN=https://vault.$DOMAINNAME
      - DATABASE_URL=postgres://vaultwarden:$POSTGRES_VAULTWARDEN_PASSWORD@postgres:5432/vaultwarden
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.vaultwarden-rtr.entrypoints=https"
      - "traefik.http.routers.vaultwarden-rtr.rule=Host(`vault.$DOMAINNAME`)"
      - "traefik.http.routers.vaultwarden-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.vaultwarden-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.vaultwarden-rtr.service=vaultwarden-svc"
      - "traefik.http.services.vaultwarden-svc.loadbalancer.server.port=80"
      ## WS HTTP Routers
      - "traefik.http.routers.vaultwarden-ws-rtr.entrypoints=https"
      - "traefik.http.routers.vaultwarden-ws-rtr.rule=Host(`vault.$DOMAINNAME`) && Path(`/notifications/hub`)"
      - "traefik.http.routers.vaultwarden-ws-rtr.tls=true"
      ## WS Middlewares
      - "traefik.http.routers.vaultwarden-ws-rtr.middlewares=chain-no-auth@file"
      ## WS HTTP Services
      - "traefik.http.routers.vaultwarden-ws-rtr.service=vaultwarden-ws-svc"
      - "traefik.http.services.vaultwarden-ws-svc.loadbalancer.server.port=3012"

  snsync:
    container_name: snsync
    image: standardnotes/syncing-server-js:$SNSYNC_VERSION
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - mariadb
      - redis
      - snext
    ports:
      - "127.0.0.1:3000:3000"
    entrypoint: [
      "./wait-for.sh", "mariadb", "3306",
      "./wait-for.sh", "redis", "6379",
      "./docker/entrypoint.sh", "start-web"
    ]
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - LOG_LEVEL=info
      - NODE_ENV=development
      - AUTH_JWT_SECRET=$AUTH_JWT_SECRET
      - EXPOSED_PORT=8007
      - PORT=3000
      - DB_PORT=3306
      - DB_HOST=mariadb
      - DB_REPLICA_HOST=mariadb
      - DB_DATABASE=standardnotes
      - DB_USERNAME=standardnotes
      - DB_PASSWORD=$MYSQL_STANDARDNOTES_PASSWORD
      - DB_DEBUG_LEVEL=all
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - NEW_RELIC_ENABLED=false
      - NEW_RELIC_APP_NAME=Sync
      - NEW_RELIC_NO_CONFIG_FILE=true
      - REDIS_URL=redis://redis:$REDIS_PASSWORD@redis:6379
      - REDIS_EVENTS_CHANNEL=events
      - AUTH_SERVER_URL=http://snauth:3002
      - EMAIL_ATTACHMENT_MAX_BYTE_SIZE=10485760
      - REVISIONS_FREQUENCY=300
      - VERSION=local

  snsync-worker:
    container_name: snsync-worker
    image: standardnotes/syncing-server-js:$SNSYNC_VERSION
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - mariadb
      - redis
      - snsync
    entrypoint: [
      "./wait-for.sh", "mariadb", "3306",
      "./wait-for.sh", "redis", "6379",
      "./wait-for.sh", "snsync", "3000",
      "./docker/entrypoint.sh", "start-worker"
    ]
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - LOG_LEVEL=info
      - NODE_ENV=development
      - AUTH_JWT_SECRET=$AUTH_JWT_SECRET
      - EXPOSED_PORT=8007
      - PORT=3000
      - DB_PORT=3306
      - DB_HOST=mariadb
      - DB_REPLICA_HOST=mariadb
      - DB_DATABASE=standardnotes
      - DB_USERNAME=standardnotes
      - DB_PASSWORD=$MYSQL_STANDARDNOTES_PASSWORD
      - DB_DEBUG_LEVEL=all
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - NEW_RELIC_ENABLED=false
      - NEW_RELIC_APP_NAME=SyncWorker
      - NEW_RELIC_NO_CONFIG_FILE=true
      - REDIS_URL=redis://redis:$REDIS_PASSWORD@redis:6379
      - REDIS_EVENTS_CHANNEL=events
      - AUTH_SERVER_URL=http://snauth:3002
      - EMAIL_ATTACHMENT_MAX_BYTE_SIZE=10485760
      - REVISIONS_FREQUENCY=300
      - VERSION=local

  snauth:
    container_name: snauth
    image: standardnotes/auth:$SNAUTH_VERSION
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - mariadb
      - redis
      - snsync
    ports:
      - "127.0.0.1:3002:3002"
    entrypoint: [
      "./wait-for.sh", "mariadb", "3306",
      "./wait-for.sh", "redis", "6379",
      "./wait-for.sh", "snsync", "3000",
      "./docker/entrypoint.sh", "start-web"
    ]
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - LOG_LEVEL=info
      - NODE_ENV=production
      - PORT=3002
      - JWT_SECRET=$JWT_SECRET
      - LEGACY_JWT_SECRET=$LEGACY_JWT_SECRET
      - PSEUDO_KEY_PARAMS_KEY=$PSEUDO_KEY_PARAMS_KEY
      - ENCRYPTION_SERVER_KEY=$ENCRYPTION_SERVER_KEY
      - AUTH_JWT_SECRET=$AUTH_JWT_SECRET
      - SYNCING_SERVER_URL=http://snsync:3000
      - NEW_RELIC_ENABLED=false
      - NEW_RELIC_APP_NAME=Auth
      - NEW_RELIC_NO_CONFIG_FILE=true
      - REDIS_EVENTS_CHANNEL=auth-events
      - AUTH_JWT_TTL=60000
      - ACCESS_TOKEN_AGE=5184000
      - REFRESH_TOKEN_AGE=31556926
      - MAX_LOGIN_ATTEMPTS=6
      - FAILED_LOGIN_LOCKOUT=3600
      - EPHEMERAL_SESSION_AGE=259200
      - DB_PORT=3306
      - DB_HOST=mariadb
      - DB_REPLICA_HOST=mariadb
      - DB_DATABASE=standardnotes
      - DB_USERNAME=standardnotes
      - DB_PASSWORD=$MYSQL_STANDARDNOTES_PASSWORD
      - DB_DEBUG_LEVEL=all
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - REDIS_URL=redis://redis:$REDIS_PASSWORD@redis:6379
      - DISABLE_USER_REGISTRATION=true
      - VERSION=local

  snauth-worker:
    container_name: snauth-worker
    image: standardnotes/auth:$SNAUTH_VERSION
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - mariadb
      - redis
      - snauth
    entrypoint: [
      "./wait-for.sh", "mariadb", "3306",
      "./wait-for.sh", "redis", "6379",
      "./wait-for.sh", "snauth", "3002",
      "./docker/entrypoint.sh", "start-worker"
    ]
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - LOG_LEVEL=info
      - NODE_ENV=production
      - PORT=3002
      - JWT_SECRET=$JWT_SECRET
      - LEGACY_JWT_SECRET=$LEGACY_JWT_SECRET
      - PSEUDO_KEY_PARAMS_KEY=$PSEUDO_KEY_PARAMS_KEY
      - ENCRYPTION_SERVER_KEY=$ENCRYPTION_SERVER_KEY
      - AUTH_JWT_SECRET=$AUTH_JWT_SECRET
      - SYNCING_SERVER_URL=http://snsync:3000
      - NEW_RELIC_ENABLED=false
      - NEW_RELIC_APP_NAME=AuthWorker
      - NEW_RELIC_NO_CONFIG_FILE=true
      - REDIS_EVENTS_CHANNEL=auth-events
      - AUTH_JWT_TTL=60000
      - ACCESS_TOKEN_AGE=5184000
      - REFRESH_TOKEN_AGE=31556926
      - MAX_LOGIN_ATTEMPTS=6
      - FAILED_LOGIN_LOCKOUT=3600
      - EPHEMERAL_SESSION_AGE=259200
      - DB_PORT=3306
      - DB_HOST=mariadb
      - DB_REPLICA_HOST=mariadb
      - DB_DATABASE=standardnotes
      - DB_USERNAME=standardnotes
      - DB_PASSWORD=$MYSQL_STANDARDNOTES_PASSWORD
      - DB_DEBUG_LEVEL=all
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - REDIS_URL=redis://redis:$REDIS_PASSWORD@redis:6379
      - DISABLE_USER_REGISTRATION=true
      - VERSION=local

  snapi:
    container_name: snapi
    image: standardnotes/api-gateway:$SNAPI_VERSION
    restart: unless-stopped
    networks:
      - traefik
      - internal
    depends_on:
      - snsync
      - snauth
      - redis
    entrypoint: [
      "./wait-for.sh", "snauth", "3002",
      "./wait-for.sh", "redis", "6379",
      "./wait-for.sh", "snsync", "3000",
      "./docker/entrypoint.sh", "start-web"
    ]
    ports:
      - 8007:3000
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - LOG_LEVEL=info
      - NODE_ENV=production
      - NEW_RELIC_ENABLED=false
      - NEW_RELIC_APP_NAME=APIGateway
      - NEW_RELIC_NO_CONFIG_FILE=true
      - SYNCING_SERVER_JS_URL=http://snsync:3000
      - PAYMENTS_SERVER_URL=https://snext.$DOMAINNAME
      - AUTH_SERVER_URL=http://snauth:3002
      - REDIS_URL=redis://redis:$REDIS_PASSWORD@redis:6379
      - REDIS_EVENTS_CHANNEL=events
      - AUTH_JWT_SECRET=$AUTH_JWT_SECRET
      - PORT=3000
      - VERSION=local
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.notesync-rtr.entrypoints=https"
      - "traefik.http.routers.notesync-rtr.rule=Host(`notesync.$DOMAINNAME`)"
      - "traefik.http.routers.notesync-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.notesync-rtr.middlewares=chain-no-auth@file"
      - "traefik.http.routers.notesync-rtr.middlewares=middlewares-standardnotes@file"
      ## HTTP Services
      - "traefik.http.routers.notesync-rtr.service=notesync-svc"
      - "traefik.http.services.notesync-svc.loadbalancer.server.port=3000"

  standardnotes:
    container_name: standardnotes
    image: standardnotes/web:stable
    restart: unless-stopped
    command: start
    networks:
      - traefik
    depends_on:
      - snsync
    ports:
      - 8010:3001
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - RAILS_ENV=development
      - PORT=3001
      - WEB_CONCURRENCY=0
      - SECRET_KEY_BASE=$STANDARD_NOTES_SECRET
      - APP_HOST=https://notes.$DOMAINNAME
      - RAILS_SERVE_STATIC_FILES=true
      - RAILS_LOG_TO_STDOUT=true
      - RAILS_LOG_LEVEL=INFO
      - DEFAULT_SYNC_SERVER=https://notesync.$DOMAINNAME
      - DEV_DEFAULT_SYNC_SERVER=https://notesync.$DOMAINNAME
      - DATADOG_ENABLED=false
      - ENABLE_UNFINISHED_FEATURES=false
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.notes-rtr.entrypoints=https"
      - "traefik.http.routers.notes-rtr.rule=Host(`notes.$DOMAINNAME`)"
      - "traefik.http.routers.notes-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.notes-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.notes-rtr.service=notes-svc"
      - "traefik.http.services.notes-svc.loadbalancer.server.port=3001"

  snext:
    container_name: snext
    image: sentriz/standardnotes-extensions:latest
    restart: unless-stopped
    command: start-local
    networks:
      - traefik
    ports:
      - 8011:80
    volumes:
      - $DOCKERDIR/snext:/repos
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - SN_EXTS_LISTEN_ADDR=:80
      - SN_EXTS_REPOS_DIR=/repos
      - SN_EXTS_DEFINITIONS_DIR=/definitions
      - SN_EXTS_BASE_URL=https://snext.$DOMAINNAME
      - SN_EXTS_UPDATE_INTERVAL_MINS=4320
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.snext-rtr.entrypoints=https"
      - "traefik.http.routers.snext-rtr.rule=Host(`snext.$DOMAINNAME`)"
      - "traefik.http.routers.snext-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.snext-rtr.middlewares=chain-no-auth@file"
      - "traefik.http.routers.snext-rtr.middlewares=middlewares-standardnotes@file"
      ## HTTP Services
      - "traefik.http.routers.snext-rtr.service=snext-svc"
      - "traefik.http.services.snext-svc.loadbalancer.server.port=80"

  redis:
    container_name: redis
    image: redis:latest
    command: redis-server --requirepass $REDIS_PASSWORD
    restart: always
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - $DOCKERDIR/redis:/data
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID

#  rediscommander:
#    container_name: rediscommander
#    image: rediscommander/redis-commander:latest
#    restart: always
#    networks:
#      internal: null
#      vpn-subnet:
#        ipv4_address: 20.20.10.6
#    depends_on:
#      - redis
#    security_opt:
#      - no-new-privileges:true
#    environment:
#      - TZ=$TZ
#      - PUID=$PUID
#      - PGID=$PGID
#      - REDIS_HOST=redis
#      - REDIS_PASSWORD=$REDIS_PASSWORD

  restic:
    container_name: restic
    image: mazzolino/restic:latest
    restart: unless-stopped
    networks:
      - socket-proxy
      - internal
    depends_on:
      - socket-proxy
      - mariadb
      - postgres
    security_opt:
      - no-new-privileges:true
    secrets:
      - restic_password
    volumes:
      - $DOCKERDIR:/source/data:ro
      - $DOCKERDIR/restic:/source/dbbackups/
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      RUN_ON_STARTUP: "true"
      BACKUP_CRON: "0 0 2 * * *"
      RESTIC_REPOSITORY: b2:$B2_BUCKET:/restic
      RESTIC_PASSWORD_FILE: /run/secrets/restic_password
      RESTIC_BACKUP_SOURCES: /source
      RESTIC_BACKUP_ARGS: >-
        --verbose
      RESTIC_FORGET_ARGS: >-
        --keep-last 10
        --keep-daily 7
        --keep-weekly 5
        --keep-monthly 12
      B2_ACCOUNT_ID: $B2_ACCOUNT_ID
      B2_ACCOUNT_KEY: $B2_ACCOUNT_KEY
      DOCKER_HOST: tcp://socket-proxy:2375
      #POST_COMMANDS_SUCCESS: 'curl -i -X GET ''https://api.telegram.org/bot$RESTIC_TGRAM_TOKEN/sendMessage?chat_id=$RESTIC_TGRAM_CHAT_ID&text=Restic-Backup-Success'''
      POST_COMMANDS_FAILURE: 'curl -i -X GET ''https://api.telegram.org/bot$RESTIC_TGRAM_TOKEN/sendMessage?chat_id=$RESTIC_TGRAM_CHAT_ID&text=Restic-Backup-Failed'''
      PRE_COMMANDS: |-
        docker exec mariadb mysqldump -u root --password="$MYSQL_ROOT_PASSWORD" --all-databases > /source/dbbackups/mariadb_dump.sql
        docker exec postgres pg_dumpall -U $POSTGRES_USER > /source/dbbackups/postgres_dump.sql

  restic-prune:
    container_name: restic-prune
    image: mazzolino/restic:latest
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - restic
      - mariadb
      - postgres
    security_opt:
      - no-new-privileges:true
    secrets:
      - restic_password
    volumes:
      - $DOCKERDIR:/source/data:ro
      - $DOCKERDIR/restic:/source/dbbackups/
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      RUN_ON_STARTUP: "false"
      PRUNE_CRON: "0 0 7 * * *"
      RESTIC_REPOSITORY: b2:$B2_BUCKET:/restic
      RESTIC_PASSWORD_FILE: /run/secrets/restic_password
      B2_ACCOUNT_ID: $B2_ACCOUNT_ID
      B2_ACCOUNT_KEY: $B2_ACCOUNT_KEY
      #POST_COMMANDS_SUCCESS: 'curl -i -X GET ''https://api.telegram.org/bot$RESTIC_TGRAM_TOKEN/sendMessage?chat_id=$RESTIC_TGRAM_CHAT_ID&text=Restic-Prune-Success'''
      POST_COMMANDS_FAILURE: 'curl -i -X GET ''https://api.telegram.org/bot$RESTIC_TGRAM_TOKEN/sendMessage?chat_id=$RESTIC_TGRAM_CHAT_ID&text=Restic-Prune-Failed'''

  restic-check:
    container_name: restic-check
    image: mazzolino/restic:latest
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - restic
      - mariadb
      - postgres
    security_opt:
      - no-new-privileges:true
    secrets:
      - restic_password
    volumes:
      - $DOCKERDIR:/source/data:ro
      - $DOCKERDIR/restic:/source/dbbackups/
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      RUN_ON_STARTUP: "false"
      CHECK_CRON: "0 15 10 * * *"
      RESTIC_CHECK_ARGS: >-
        --read-data-subset=10%
      RESTIC_REPOSITORY: b2:$B2_BUCKET:/restic
      RESTIC_PASSWORD_FILE: /run/secrets/restic_password
      B2_ACCOUNT_ID: $B2_ACCOUNT_ID
      B2_ACCOUNT_KEY: $B2_ACCOUNT_KEY
      #POST_COMMANDS_SUCCESS: 'curl -i -X GET ''https://api.telegram.org/bot$RESTIC_TGRAM_TOKEN/sendMessage?chat_id=$RESTIC_TGRAM_CHAT_ID&text=Restic-Check-Success'''
      POST_COMMANDS_FAILURE: 'curl -i -X GET ''https://api.telegram.org/bot$RESTIC_TGRAM_TOKEN/sendMessage?chat_id=$RESTIC_TGRAM_CHAT_ID&text=Restic-Check-Failed'''

  meshcentral:
    container_name: meshcentral
    image: typhonragewind/meshcentral:latest
    restart: always
    networks:
      - traefik
    depends_on:
      - traefik
    ports:
      - 8086:443
    volumes:
      - $DOCKERDIR/meshcentral/data:/opt/meshcentral/meshcentral-data
      - $DOCKERDIR/meshcentral/user_files:/opt/meshcentral/meshcentral-files
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - HOSTNAME=mesh.$DOMAINNAME
      - REVERSE_PROXY=mesh.$DOMAINNAME
      - REVERSE_PROXY_TLS_PORT=443
      - IFRAME=false
      - ALLOW_NEW_ACCOUNTS=false
      - WEBRTC=true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.mesh-rtr.entrypoints=https"
      - "traefik.http.routers.mesh-rtr.rule=Host(`mesh.$DOMAINNAME`)"
      - "traefik.http.routers.mesh-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.mesh-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.mesh-rtr.service=mesh-svc"
      - "traefik.http.services.mesh-svc.loadbalancer.server.port=443"

  tandoor_backend:
    container_name: tandoor_backend
    image: vabene1111/recipes:latest
    restart: always
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    depends_on:
      - postgres
    volumes:
      - $DOCKERDIR/tandoor/staticfiles:/opt/recipes/staticfiles
      - $DOCKERDIR/tandoor/nginx_config:/opt/recipes/nginx/conf.d
      - $DOCKERDIR/tandoor/mediafiles:/opt/recipes/mediafiles
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - DEBUG=0
      - ALLOWED_HOSTS=tandoor.$DOMAINNAME
      - TIMEZONE=$TZ
      - SECRET_KEY=$TANDOOR_SECRET_KEY
      - DB_ENGINE=django.db.backends.postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=tandoor
      - POSTGRES_PASSWORD=$POSTGRES_TANDOOR_PASSWORD
      - POSTGRES_DB=tandoor
      - FRACTION_PREF_DEFAULT=0
      - COMMENT_PREF_DEFAULT=1
      - SHOPPING_MIN_AUTOSYNC_INTERVAL=5
      - GUNICORN_MEDIA=0
      - ENABLE_SIGNUP=0

  tandoor:
    container_name: tandoor
    image: nginx:mainline-alpine
    restart: always
    networks:
      - traefik
      - internal
    depends_on:
      - traefik
      - tandoor_backend
    ports:
      - 8087:80
    volumes:
      - $DOCKERDIR/tandoor/staticfiles:/static
      - $DOCKERDIR/tandoor/nginx_config:/etc/nginx/conf.d:ro
      - $DOCKERDIR/tandoor/mediafiles:/media
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tandoor-rtr.entrypoints=https"
      - "traefik.http.routers.tandoor-rtr.rule=Host(`tandoor.$DOMAINNAME`)"
      - "traefik.http.routers.tandoor-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.tandoor-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.tandoor-rtr.service=tandoor-svc"
      - "traefik.http.services.tandoor-svc.loadbalancer.server.port=80"
